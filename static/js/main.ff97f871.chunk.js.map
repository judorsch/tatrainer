{"version":3,"sources":["Components/CardViewer.tsx","Components/UserList.tsx","Components/ControlPanel.tsx","utilities/data.ts","Components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","answerRevealed","Col","Body","Title","Text","prompt","answer","UserList","users","setUsers","items","onChange","newUsers","console","log","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","ControlPanel","deck","showAddCardModal","setCard","reveal","useState","rawUsers","localStorage","getItem","JSON","parse","getLocalStorageUsers","Button","onClick","Math","floor","random","length","className","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","AddCardModal","visible","setVisible","addCard","setPrompt","setAnswer","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","ev","target","Footer","kind","App","CARDS","activeCard","setActiveCard","setDeck","Container","Row","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff97f871.chunk.js","sourcesContent":["import {Col, Card as BootstrapCard} from 'react-bootstrap'\r\nimport { Card } from '../interfaces/card'\r\n\r\n\r\nexport function CardViewer({card, answerRevealed}: {card:Card, answerRevealed:boolean}): JSX.Element {\r\n    return( \r\n    <Col>\r\n    <BootstrapCard>\r\n        <BootstrapCard.Body>\r\n            <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\r\n            <BootstrapCard.Text>\r\n            <strong>Prompt</strong>: {card.prompt}\r\n            </BootstrapCard.Text>\r\n            {answerRevealed && <BootstrapCard.Text>\r\n            <strong>Answer</strong>: {card.answer}\r\n            </BootstrapCard.Text>}\r\n        </BootstrapCard.Body>\r\n\r\n    </BootstrapCard>\r\n    </Col>)\r\n}","import EditableDndList, { Task } from \"editable-dnd-list\";\r\n\r\nexport function UserList({users, setUsers}: {users:Task[], setUsers:(t: Task[])=>void}):JSX.Element{\r\n    function handleChange(newUsers: Task[]):void{\r\n        console.log(newUsers);\r\n    }\r\n    return <EditableDndList items={users} onChange={handleChange}></EditableDndList>\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\nimport { getRandomElement, shuffle } from '../utilities/data';\r\nimport { UserList } from './UserList';\r\nimport { useState } from 'react';\r\nimport { Task as User} from 'editable-dnd-list';\r\n\r\nexport const LOCAL_STORAGE_USERS = 'ta-trainer-users';\r\nexport const INITIAL_USERS:User[] = [\r\n    {id: '1', text:\"Dr. Bart\"},\r\n    {id: '2', text:\"Ada Bart\"},\r\n    {id: '3', text:\"Babbage Bart\"},\r\n    {id: '4', text:\"Pumpkin Bart\"},\r\n    {id: '5', text:\"Ellie Bart\"}\r\n];\r\n\r\nexport function getLocalStorageUsers(): User[]{\r\n    let rawUsers: string|null = localStorage.getItem(LOCAL_STORAGE_USERS);\r\n    if(rawUsers === null){\r\n        return [...INITIAL_USERS];\r\n    }\r\n    else{\r\n        return JSON.parse(rawUsers);\r\n    }\r\n\r\n}\r\n\r\nexport function ControlPanel({deck, showAddCardModal, setCard, reveal, answerRevealed}: {deck:Card[], showAddCardModal:(b:boolean)=>void, setCard:(c: Card)=>void, reveal:(r:boolean)=>void, answerRevealed:boolean}): JSX.Element{\r\n    const [users, setUsers] = useState<User[]>(getLocalStorageUsers());\r\n    function setRandomCard(){\r\n        reveal(false);\r\n        setCard(getRandomElement(deck))\r\n    }\r\n    function shuffleUsers(){\r\n        setUsers([...shuffle(users)]);\r\n    }\r\n    function save(){\r\n        localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\r\n    }\r\n    function addNewCard(){\r\n        showAddCardModal(true);\r\n    }\r\n    return( \r\n    <Col>\r\n        <h1>Control Panel</h1> \r\n        <UserList users={users} setUsers={setUsers}></UserList>\r\n        <Button onClick={setRandomCard} className=\"m-4\">Swap Current Card</Button>\r\n        <Button onClick={()=>reveal(!answerRevealed)} className=\"m-4\">Reveal Answer</Button>\r\n        <Button onClick={shuffleUsers} className=\"m-4\">Shuffle Users</Button>\r\n        <Button onClick={save} className=\"m-4\" variant=\"success\">Save</Button>\r\n        <Button onClick={addNewCard} className=\"m-4\">Add New Card</Button>\r\n    </Col>)\r\n}","export function getRandomElement<T>(items:T[]): T{\r\n    return items[Math.floor(Math.random()*items.length)]\r\n}\r\nexport function shuffle<T>(array: T[]): T[] {\r\n    let currentIndex = array.length,  randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (currentIndex !== 0) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n  \r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex], array[currentIndex]];\r\n    }\r\n  \r\n    return array;\r\n  }","import { useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Card } from \"../interfaces/card\";\r\n\r\nexport function AddCardModal({visible, setVisible, addCard}: {visible:boolean, setVisible: (b:boolean)=>void, addCard:(c:Card)=>void}): JSX.Element{\r\n    const [prompt, setPrompt] = useState<string>(\"Prompt Text\");\r\n    const [answer, setAnswer] = useState<string>(\"Answer Text\");\r\n    function saveCard(){\r\n        addCard({\r\n            id: Math.random(),\r\n            kind: \"Custom\",\r\n            prompt,\r\n            answer,\r\n        });\r\n        setVisible(false);\r\n    }\r\n    const hide = ()=> setVisible(false);\r\n    return(<Modal show={visible} onHide={hide}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add New Card</Modal.Title>\r\n        </Modal.Header>\r\n      \r\n        <Modal.Body>\r\n        <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"addCardForm.promptTextArea\">\r\n                <Form.Label>Prompt</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} value={prompt} onChange={(ev: React.ChangeEvent<HTMLInputElement>)=>setPrompt(ev.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextarea\">\r\n                <Form.Label>Suggested Answer</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} value={answer} onChange={(ev: React.ChangeEvent<HTMLInputElement>)=>setAnswer(ev.target.value)}/>\r\n            </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n      \r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={hide}>Close</Button>\r\n          <Button variant=\"primary\" onClick={saveCard}>Save changes</Button>\r\n        </Modal.Footer>\r\n      </Modal>)\r\n}","import { useState } from 'react';\nimport './App.css';\nimport CARDS from './asset/cards.json';\nimport { CardViewer } from './Components/CardViewer';\nimport { ControlPanel } from './Components/ControlPanel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row} from 'react-bootstrap';\nimport {Card} from './interfaces/card';\nimport { AddCardModal } from './Components/AddCardModal';\n\nfunction App(): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n  const [answerRevealed, reveal] = useState<boolean>(false);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [deck, setDeck] = useState<Card[]>(CARDS);\n\n  function addCard(newCard:Card){\n    setDeck([...deck, newCard]);\n  }\n  return (\n    <Container className=\"App\">\n      <Row>\n        <ControlPanel deck = {deck} showAddCardModal = {setVisible} setCard={setActiveCard} reveal={reveal} answerRevealed={answerRevealed}></ControlPanel>\n        <CardViewer card={activeCard} answerRevealed={answerRevealed}></CardViewer>\n        <AddCardModal visible={visible} setVisible={setVisible} addCard={addCard}></AddCardModal>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}