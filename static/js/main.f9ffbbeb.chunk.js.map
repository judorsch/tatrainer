{"version":3,"sources":["Components/CardViewer.tsx","Components/ControlPanel.tsx","utilities/data.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","Col","prompt","answer","ControlPanel","setCard","Button","onClick","items","CARDS","Math","floor","random","length","App","useState","activeCard","setActiveCard","Container","className","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAIO,SAASA,EAAT,GAAuD,IAAlCC,EAAiC,EAAjCA,KACxB,OACA,eAACC,EAAA,EAAD,WACI,6CACA,2CAAcD,EAAKE,UACnB,qDAAwBF,EAAKG,a,YCH9B,SAASC,EAAT,GAAyE,IAAlDC,EAAiD,EAAjDA,QAI1B,OAAO,eAACJ,EAAA,EAAD,WACP,+CACA,cAACK,EAAA,EAAD,CAAQC,QALR,WCPG,IAA6BC,EDQ5BH,GCR4BG,EDQHC,GCPhBC,KAAKC,MAAMD,KAAKE,SAASJ,EAAMK,WDW5C,kC,0BESWC,MAZf,WACE,MAAoCC,mBAAeN,EAAM,IAAzD,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,OACE,cAACC,EAAA,EAAD,CAAWC,UAAU,MAArB,SACE,eAACC,EAAA,EAAD,WACE,cAAChB,EAAD,CAAcC,QAASY,IACvB,cAAClB,EAAD,CAAYC,KAAMgB,UCDXK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f9ffbbeb.chunk.js","sourcesContent":["import {Col} from 'react-bootstrap'\r\nimport { Card } from '../interfaces/card'\r\n\r\n\r\nexport function CardViewer({card}: {card:Card}): JSX.Element {\r\n    return( \r\n    <Col>\r\n        <h1>Card Viewer</h1>\r\n        <div>Prompt: {card.prompt}</div>\r\n        <div>Suggested Answer: {card.answer}</div>\r\n    </Col>)\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\nimport CARDS from '../asset/cards.json'\r\nimport { getRandomElement } from '../utilities/data';\r\n\r\n\r\nexport function ControlPanel({setCard}: {setCard:(c: Card)=>void}): JSX.Element{\r\n    function setRandomCard(){\r\n        setCard(getRandomElement(CARDS as Card[]))\r\n    }\r\n    return <Col>\r\n    <h1>Control Panel</h1> \r\n    <Button onClick={setRandomCard}>Swap Current Card</Button></Col>\r\n}","export function getRandomElement<T>(items:T[]): T{\r\n    return items[Math.floor(Math.random()*items.length)]\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport CARDS from './asset/cards.json';\nimport { CardViewer } from './Components/CardViewer';\nimport { ControlPanel } from './Components/ControlPanel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row} from 'react-bootstrap';\nimport {Card} from './interfaces/card';\n\nfunction App(): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n  return (\n    <Container className=\"App\">\n      <Row>\n        <ControlPanel setCard={setActiveCard}></ControlPanel>\n        <CardViewer card={activeCard}></CardViewer>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}